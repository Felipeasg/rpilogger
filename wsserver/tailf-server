#!/usr/bin/python -u

'''
    ============= tail -f forwarder over websocket protocol ==============
    This is a service which monitors file (defined in logfiles.txt) 
    and forwards file changes on the port defined below. The www-diagnostic 
    page of the datalogger is based on this. 
    The result is a "tail -f" of multiple files in real time on the webpage.
    
    author:     Daniel Piri
    web:        http://opendatalogger.com
    licence:    public GPL, (CC-BY-NC-SA), free software, non-commercial
        
'''

from datetime import datetime
import sys, os, time

PORT=50000
_dirn=os.path.dirname(os.path.realpath(__file__))

print "ws://localhost:"+str(PORT)

if len(sys.argv)>1 and str(sys.argv[1])=="--debug":
    print "debug mode"
    
else:
    time.sleep(5) #to prevent initv to respawn too fast        
    
    #redirect stdin, stdout
    logfile=os.path.join(_dirn,"log/tailf-server.log")
    unbuffered = open(logfile, 'w', 0)
    sys.stdout = unbuffered
    sys.stderr = unbuffered

#read in which files to watch
tailfiles=os.path.join(_dirn,"logfiles.txt")
logs=[]
with open(tailfiles) as fl:
    for line in fl:
        logs.append('-f')
        logs.append(line.rstrip('\n'))


from twisted.internet import reactor, protocol
from autobahn.twisted.websocket import WebSocketServerFactory, WebSocketServerProtocol,listenWS

class ProcessProtocol(protocol.ProcessProtocol):
    """ I handle a child process launched via reactor.spawnProcess.
    I just buffer the output into a list and call WebSocketProcessOutputterThingFactory.broadcast when
    any new output is read
    """
    def __init__(self, websocket_factory):
        self.ws = websocket_factory
        self.buffer = []

    def outReceived(self, message):
        self.ws.broadcast(message)
        self.buffer.append(message)
        self.buffer = self.buffer[-20:] # Last 10 messages please

    def errReceived(self, data):
        print "Error: %s" % data


class WebSocketProcessOutputterThing(WebSocketServerProtocol):
    """ I handle a single connected client. We don't need to do much here, simply call the register and un-register functions when needed.
    """
    def onOpen(self):
        self.factory.register(self)
        for line in self.factory.process.buffer:
            self.sendMessage(line)

    def connectionLost(self, reason):
        WebSocketServerProtocol.connectionLost(self, reason)
        self.factory.unregister(self)


class WebSocketProcessOutputterThingFactory(WebSocketServerFactory):
    protocol = WebSocketProcessOutputterThing

    def __init__(self, *args, **kwargs):
        global logs
        WebSocketServerFactory.__init__(self, *args, **kwargs)
        self.clients = []
        self.numClients=0
        self.process = ProcessProtocol(self)
        reactor.spawnProcess(self.process, "tail", args=logs, usePTY=True)
        

    def register(self, client):
        if not client in self.clients:
            self.clients.append(client)
            self.numClients+=1
            print str(datetime.now()) +" %d. registered client %s" % (self.numClients, client.peer)

    def unregister(self, client):
        if client in self.clients:
            self.clients.remove(client)
            self.numClients-=1
            print str(datetime.now()) + "  unregistered client %s (%d remains)" % (client.peer, self.numClients)

    def broadcast(self, message):
        for client in self.clients:
            client.sendMessage(message)
        #import pdb; pdb.set_trace()
        #print "broadcasted for %d clients" %(self.clients.count(self))

if __name__ == "__main__":
    print "Running process tail with multiple files on port %d" %(PORT)
    print "tail ".join(logs)
    factory = WebSocketProcessOutputterThingFactory("ws://localhost:"+str(PORT), debug=False)
    listenWS(factory)
    reactor.run()

